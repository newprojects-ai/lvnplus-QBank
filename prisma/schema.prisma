generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // MariaDB uses the mysql provider in Prisma
  url      = env("QBANK_DB_URL")
}

model subjects {
  subject_id      Int       @id @default(autoincrement())
  subject_name    String    @unique @db.VarChar(100)
  description     String?   @db.Text
  topics          topics[]
  templates       templates[]
  difficulty_levels difficulty_levels[]
}

model topics {
  topic_id     Int       @id @default(autoincrement())
  subject_id   Int
  topic_name   String    @db.VarChar(100)
  description  String?   @db.Text
  subject      subjects  @relation(fields: [subject_id], references: [subject_id])
  subtopics    subtopics[]
  templates    templates[]

  @@unique([subject_id, topic_name])
}

model subtopics {
  subtopic_id   Int       @id @default(autoincrement())
  topic_id      Int
  subtopic_name String    @db.VarChar(100)
  description   String?   @db.Text
  topic         topics    @relation(fields: [topic_id], references: [topic_id])
  templates     templates[]

  @@unique([topic_id, subtopic_name])
}

model difficulty_levels {
  level_id        Int       @id @default(autoincrement())
  level_name      String    @unique @db.VarChar(50)
  level_value     Int       @unique
  subject_id      Int
  purpose         String    @db.Text
  characteristics String    @db.Text
  focus_area      String    @db.Text
  steps_required  String?   @db.VarChar(50)
  created_at      DateTime  @default(now()) @db.Timestamp(0)
  active          Boolean   @default(true) @db.TinyInt(1)
  subject         subjects  @relation(fields: [subject_id], references: [subject_id])
  templates       templates[]
}

model templates {
  id               String    @id @default(uuid())
  name             String    @db.VarChar(255)
  description      String?   @db.Text
  subject_id       Int
  topic_id         Int
  subtopic_id      Int
  difficulty_level Int       @db.TinyInt
  level_id         Int
  question_format  String    @db.Text
  options_format   String    @db.Text
  solution_format  String    @db.Text
  example_question String?   @db.Text
  created_at       DateTime  @default(now())
  created_by       String    @db.VarChar(255)
  
  subject          subjects  @relation(fields: [subject_id], references: [subject_id])
  topic            topics    @relation(fields: [topic_id], references: [topic_id])
  subtopic         subtopics @relation(fields: [subtopic_id], references: [subtopic_id])
  difficulty_level difficulty_levels @relation(fields: [level_id], references: [level_id])
  batches          generation_batches[]

  @@index([subject_id])
  @@index([topic_id])
  @@index([subtopic_id])
  @@index([level_id])
}

model generation_batches {
  id               String    @id @default(uuid())
  template_id      String
  count            Int
  difficulty_level Int       @db.TinyInt
  status           String    @db.VarChar(20)
  created_at       DateTime  @default(now())
  completed_at     DateTime?
  error_message    String?   @db.Text
  ai_model         String    @default("gpt-4") @db.VarChar(50)
  ai_temperature   Float     @default(0.7)
  
  template         templates @relation(fields: [template_id], references: [id])
  questions        generated_questions[]
  export_logs      export_logs[]
}

model generated_questions {
  id                  String    @id @default(uuid())
  batch_id            String
  subject_name        String    @db.VarChar(100)
  topic_name          String    @db.VarChar(100)
  subtopic_name       String    @db.VarChar(100)
  question_text       String    @db.Text
  question_text_plain String    @db.Text
  options             String    @db.Text
  options_plain       String    @db.Text
  correct_answer      String    @db.VarChar(255)
  correct_answer_plain String   @db.VarChar(255)
  solution            String    @db.Text
  solution_plain      String    @db.Text
  difficulty_level    Int       @db.TinyInt
  created_at          DateTime  @default(now())
  created_by          String    @db.VarChar(255)
  status              String    @db.VarChar(20)
  export_status       String?   @db.VarChar(20)
  export_error        String?   @db.Text
  lvnplus_question_id BigInt?
  
  batch               generation_batches @relation(fields: [batch_id], references: [id])
}

model qbank_users {
  id         String   @id @default(uuid())
  email      String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  first_name String   @db.VarChar(100)
  last_name  String   @db.VarChar(100)
  created_at DateTime @default(now())
}

model export_logs {
  id                  String    @id @default(uuid())
  batch_id            String?
  question_ids        String    @db.Text
  status              String    @db.VarChar(20)
  export_time         DateTime  @default(now())
  rollback_time       DateTime?
  error_message       String?   @db.Text
  lvnplus_question_ids String?  @db.Text
  
  batch               generation_batches? @relation(fields: [batch_id], references: [id])
}

model ai_config {
  id           String   @id @default(uuid())
  provider     String   @db.VarChar(20)
  model        String   @db.VarChar(50)
  api_key      String   @db.VarChar(255)
  max_tokens   Int      @default(1000)
  temperature  Float    @default(0.7)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  is_default   Boolean  @default(false)
}